# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.namejuice.com/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/parsers/whois.namejuice.com.rb'

describe Whois::Parsers::WhoisNamejuiceCom, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.namejuice.com/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#domain" do
    it do
      expect(subject.domain).to eq("namejuice.com")
    end
  end
  describe "#domain_id" do
    it do
      expect(subject.domain_id).to eq("104784662_DOMAIN_COM-VRSN")
    end
  end
  describe "#status" do
    it do
      expect(subject.status).to eq(:registered)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("2004-03-25 16:06:56 UTC"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("2018-05-03 09:52:37 UTC"))
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to be_a(Time)
      expect(subject.expires_on).to eq(Time.parse("2020-10-09 04:00:00 UTC"))
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Parser::Registrar)
      expect(subject.registrar.id).to eq("636")
      expect(subject.registrar.name).to eq("BRANDON GRAY INTERNET SERVICES, INC. DBA NAMEJUICE.COM")
      expect(subject.registrar.organization).to eq("BRANDON GRAY INTERNET SERVICES, INC. DBA NAMEJUICE.COM")
      expect(subject.registrar.url).to eq("http://www.namejuice.com")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].name).to eq("Domain Registrar")
      expect(subject.registrant_contacts[0].organization).to eq("Brandon Gray Internet Services Inc.")
      expect(subject.registrant_contacts[0].address).to eq("7100 Warden Ave, Unit 8")
      expect(subject.registrant_contacts[0].city).to eq("Markham")
      expect(subject.registrant_contacts[0].zip).to eq("L3R 8B5")
      expect(subject.registrant_contacts[0].state).to eq("ON")
      expect(subject.registrant_contacts[0].country_code).to eq("CA")
      expect(subject.registrant_contacts[0].phone).to eq("+1.9054152681")
      expect(subject.registrant_contacts[0].fax).to eq("+1.9054152682")
      expect(subject.registrant_contacts[0].email).to eq("registrar@namejuice.com")
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts.size).to eq(1)
      expect(subject.admin_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].name).to eq("Domain Registrar")
      expect(subject.admin_contacts[0].organization).to eq("Brandon Gray Internet Services Inc.")
      expect(subject.admin_contacts[0].address).to eq("7100 Warden Ave, Unit 8")
      expect(subject.admin_contacts[0].city).to eq("Markham")
      expect(subject.admin_contacts[0].zip).to eq("L3R 8B5")
      expect(subject.admin_contacts[0].state).to eq("ON")
      expect(subject.admin_contacts[0].country_code).to eq("CA")
      expect(subject.admin_contacts[0].phone).to eq("+1.9054152681")
      expect(subject.admin_contacts[0].fax).to eq("+1.9054152682")
      expect(subject.admin_contacts[0].email).to eq("registrar@namejuice.com")
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts.size).to eq(1)
      expect(subject.technical_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].name).to eq("Domain Registrar")
      expect(subject.technical_contacts[0].organization).to eq("Brandon Gray Internet Services Inc.")
      expect(subject.technical_contacts[0].address).to eq("7100 Warden Ave, Unit 8")
      expect(subject.technical_contacts[0].city).to eq("Markham")
      expect(subject.technical_contacts[0].zip).to eq("L3R 8B5")
      expect(subject.technical_contacts[0].state).to eq("ON")
      expect(subject.technical_contacts[0].country_code).to eq("CA")
      expect(subject.technical_contacts[0].phone).to eq("+1.9054152681")
      expect(subject.technical_contacts[0].fax).to eq("+1.9054152682")
      expect(subject.technical_contacts[0].email).to eq("registrar@namejuice.com")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(4)
      expect(subject.nameservers[0]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[0].name).to eq("dns1.nameresolvers.com")
      expect(subject.nameservers[1]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[1].name).to eq("dns2.nameresolvers.com")
      expect(subject.nameservers[2]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[2].name).to eq("dns3.nameresolvers.com")
      expect(subject.nameservers[3]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[3].name).to eq("dns4.nameresolvers.com")
    end
  end
end
