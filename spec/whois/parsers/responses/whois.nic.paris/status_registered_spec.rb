# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.nic.paris/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/parsers/whois.nic.paris.rb'

describe Whois::Parsers::WhoisNicParis, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.nic.paris/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#status" do
    it do
      expect(subject.status).to eq(:registered)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("2014-06-03T13:05:37Z"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("2020-04-26T22:20:43Z"))
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to be_a(Time)
      expect(subject.expires_on).to eq(Time.parse("2022-06-03T13:05:37Z"))
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].name).to eq("REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].organization).to eq("VILLE DE PARIS")
      expect(subject.registrant_contacts[0].address).to eq("REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].city).to eq("REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].zip).to eq("REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].state).to eq("N/C")
      expect(subject.registrant_contacts[0].country).to eq(nil)
      expect(subject.registrant_contacts[0].country_code).to eq("FR")
      expect(subject.registrant_contacts[0].phone).to eq("REDACTED FOR PRIVACY ext: REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].fax).to eq("REDACTED FOR PRIVACY")
      expect(subject.registrant_contacts[0].email).to eq("Please query the RDDS service of the Registrar of Record identified in this output for information on how to contact the Registrant, Admin, or Tech contact of the queried domain name.")
      expect(subject.registrant_contacts[0].updated_on).to eq(nil)
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts.size).to eq(1)
      expect(subject.admin_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].name).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].organization).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].address).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].city).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].zip).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].state).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].country).to eq(nil)
      expect(subject.admin_contacts[0].country_code).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].phone).to eq("REDACTED FOR PRIVACY ext: REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].fax).to eq("REDACTED FOR PRIVACY")
      expect(subject.admin_contacts[0].email).to eq("Please query the RDDS service of the Registrar of Record identified in this output for information on how to contact the Registrant, Admin, or Tech contact of the queried domain name.")
      expect(subject.admin_contacts[0].updated_on).to eq(nil)
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts.size).to eq(1)
      expect(subject.technical_contacts[0]).to be_a(Whois::Parser::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].name).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].organization).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].address).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].city).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].zip).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].state).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].country).to eq(nil)
      expect(subject.technical_contacts[0].country_code).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].phone).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].fax).to eq("REDACTED FOR PRIVACY")
      expect(subject.technical_contacts[0].email).to eq("Please query the RDDS service of the Registrar of Record identified in this output for information on how to contact the Registrant, Admin, or Tech contact of the queried domain name.")
      expect(subject.technical_contacts[0].updated_on).to eq(nil)
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(7)
      expect(subject.nameservers[0]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[0].name).to eq("mdpdns01.paris.fr")
      expect(subject.nameservers[1]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[1].name).to eq("mdpdns02.paris.fr")
      expect(subject.nameservers[2]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[2].name).to eq("ns2.perf1.fr")
      expect(subject.nameservers[3]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[3].name).to eq("ns3.perf1.com")
      expect(subject.nameservers[4]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[4].name).to eq("ns3.perf1.eu")
      expect(subject.nameservers[5]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[5].name).to eq("ns4.perf1.de")
      expect(subject.nameservers[6]).to be_a(Whois::Parser::Nameserver)
      expect(subject.nameservers[6].name).to eq("ns5.perf1.asia")
    end
  end
end
